<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>


 
<#+
	

    //Model Folder
    public List<string> GetAllFiles()
    {
		string modelPath = @"C:\Users\haraissia\Documents\Visual Studio 2013\Projects\PrivateChef\trunk\Model";
        System.IO.DirectoryInfo dinfo = new  System.IO.DirectoryInfo(modelPath);
        List<string> files = (dinfo.GetFiles("*.cs").Select(fileName => Path.GetFileNameWithoutExtension(fileName.ToString()))).ToList();
        var mylist  = files.Except(excludedclasses);
        return mylist.ToList();
    }


    public string GetModelPath()
    {
         System.IO.FileInfo fi = new  System.IO.FileInfo(Host.TemplateFile);
        string currentUnitofWorkFolder = fi.Directory.FullName;
      //  string currentRepositorySolutionFolder = fi.Directory.Parent.Parent.FullName;
        string ApplicatonSolutionFolder= fi.Directory.Parent.Parent.FullName;


        string parentFolder= fi.Directory.Parent.FullName;
        string ModelFolder= Path.Combine(ApplicatonSolutionFolder,@"Model");
        if ( Directory.Exists(ModelFolder)) {
            return ModelFolder;
        }
        Error("Could not find the Model Folder");
        return string.Empty;
    }


    public List<string> excludedclasses =  new List<string>
        {
            "PrivateChefModel.Context",
            "PrivateChefModel.Designer",
            "PrivateChefModel.edmx.diagram",
            "sysdiagram",
            "PrivateChefModel",
            "PrivateChefContext"
            };


    public List<string> GetAllFilesFromModelPath()
    {
			string modelPath = @"C:\Users\haraissia\Documents\Visual Studio 2013\Projects\PrivateChef\trunk\Model";
        System.IO.DirectoryInfo dinfo = new System.IO.DirectoryInfo(modelPath);
        List<string> files = (dinfo.GetFiles("*.cs").Select(fileName => Path.GetFileNameWithoutExtension(fileName.ToString()))).ToList();
        var mylist  = files.Except(excludedclasses);
        return mylist.ToList();
    }

    
    public string CurrentModelDirectoryFromSolution()
    {
        var serviceProvider = this.Host as IServiceProvider;
        var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
        foreach (Project p in dte.Solution.Projects)

        {
            if (p.Name == "Model")
            {
                 System.IO.FileInfo fi = new  System.IO.FileInfo(p.FullName);
                string SolutionModelFolder = fi.Directory.FullName;
                string ModelFolder= Path.Combine(SolutionModelFolder,@"Models");
                return ModelFolder;

            }
        }
        Error("Could not find the Model Folder");
        return string.Empty;
    }

    public string CurrentModelViewDirectoryFromSolution()
    {
        var serviceProvider = this.Host as IServiceProvider;
        var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
        foreach (Project p in dte.Solution.Projects)

        {
            if (p.Name == "RentalMobile.Model")
            {
                System.IO.FileInfo fi = new System.IO.FileInfo(p.FullName);
                string SolutionModelFolder = fi.Directory.FullName;
                string ModelFolder= Path.Combine(SolutionModelFolder,@"ModelViews");
                return ModelFolder;

            }
        }
        Error("Could not find the Model Folder");
        return string.Empty;
    }

    public static string ToLowerFirstChar(string input)
    {
        string newString = input;
        if (!String.IsNullOrEmpty(newString) && Char.IsUpper(newString[0]))
            newString = Char.ToLower(newString[0]) + newString.Substring(1);
        return newString;
    }

#>